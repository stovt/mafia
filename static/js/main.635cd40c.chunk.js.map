{"version":3,"sources":["styles/colors.ts","styles/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","primary","textPrimary","textSecondary","transparentize","background","paper","buttonText","border","themeOptions","palette","type","main","default","text","secondary","divider","shape","borderRadius","overrides","MuiButton","root","textTransform","containedPrimary","color","MuiInputLabel","asterisk","display","theme","createMuiTheme","ROLES","INITIAL_VALUE","App","useState","value","setValue","shuffledValue","setShuffledValue","handleOnChange","useCallback","event","val","reason","details","option","values","slice","indexOf","handleOnGenerate","shuffled","map","a","Math","random","sort","b","Box","my","px","mx","maxWidth","Autocomplete","multiple","freeSolo","options","getOptionLabel","getOptionSelected","renderTags","getTagProps","index","Chip","variant","label","renderInput","params","TextField","placeholder","onChange","textAlign","Button","onClick","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","key","Boolean","window","location","hostname","match","renderRoot","document","getElementById","ReactDOM","render","ThemeProvider","CssBaseline","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.635cd40c.chunk.js","sourcesContent":["import { transparentize } from 'polished';\r\n\r\nconst colors = {\r\n  primary: '#0c9dbe',\r\n  textPrimary: '#fff',\r\n  textSecondary: transparentize(0.4, '#fff'),\r\n  background: '#202125',\r\n  paper: '#292a2d',\r\n  buttonText: '#131417',\r\n  border: transparentize(0.88, '#fff')\r\n};\r\n\r\nexport default colors;\r\n","import { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\r\nimport colors from './colors';\r\n\r\nexport const themeOptions: ThemeOptions = {\r\n  colors,\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: colors.primary\r\n    },\r\n    background: {\r\n      default: colors.background\r\n    },\r\n    text: {\r\n      primary: colors.textPrimary,\r\n      secondary: colors.textSecondary\r\n    },\r\n    divider: colors.border\r\n  },\r\n  shape: {\r\n    borderRadius: 8\r\n  },\r\n  overrides: {\r\n    MuiButton: {\r\n      root: {\r\n        textTransform: 'none'\r\n      },\r\n      containedPrimary: {\r\n        color: colors.buttonText\r\n      }\r\n    },\r\n    MuiInputLabel: {\r\n      asterisk: {\r\n        display: 'none'\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst theme = createMuiTheme(themeOptions);\r\n\r\nexport default theme;\r\n","import React, { useState, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Chip,\r\n  Button,\r\n  TableContainer,\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody\r\n} from '@material-ui/core';\r\nimport Autocomplete, {\r\n  AutocompleteChangeReason,\r\n  AutocompleteChangeDetails\r\n} from '@material-ui/lab/Autocomplete';\r\n\r\nconst ROLES = ['Мафія', 'Терорист', 'Мирний', 'Шлюха', 'Шериф', 'Лікар', 'Телохранітель'];\r\nconst INITIAL_VALUE = [\r\n  'Мафія',\r\n  'Мафія',\r\n  'Терорист',\r\n  'Шлюха',\r\n  'Шериф',\r\n  'Лікар',\r\n  'Мирний',\r\n  'Мирний',\r\n  'Мирний',\r\n  'Мирний'  \r\n];\r\n\r\nconst shuffleArray = (arr: any[]) =>\r\n  arr\r\n    .map(a => [Math.random(), a])\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(a => a[1]);\r\n\r\nconst App = () => {\r\n  const [value, setValue] = useState(INITIAL_VALUE);\r\n  const [shuffledValue, setShuffledValue] = useState<string[]>([]);\r\n\r\n  const handleOnChange = useCallback(\r\n    (\r\n      event: React.ChangeEvent<{}>,\r\n      val: string[],\r\n      reason: AutocompleteChangeReason,\r\n      details?: AutocompleteChangeDetails<string>\r\n    ) => {\r\n      if (details?.option) {\r\n        switch (reason) {\r\n          case 'create-option':\r\n            setValue(values => [...values, details.option]);\r\n            break;\r\n          case 'remove-option':\r\n            setValue(values => [\r\n              ...values.slice(0, values.indexOf(details.option)),\r\n              ...values.slice(values.indexOf(details.option) + 1)\r\n            ]);\r\n            break;\r\n          case 'select-option':\r\n            setValue(values => [...values, details.option]);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleOnGenerate = useCallback(() => {\r\n    const shuffled = shuffleArray(value);\r\n    setShuffledValue(shuffled);\r\n  }, [value]);\r\n\r\n  return (\r\n    <Box my={5} px={3} mx='auto' maxWidth={600}>\r\n      <Autocomplete\r\n        multiple\r\n        freeSolo\r\n        options={ROLES}\r\n        getOptionLabel={option => option}\r\n        getOptionSelected={() => false}\r\n        renderTags={\r\n          (val, getTagProps) =>\r\n            val.map((option, index) => (\r\n              <Chip variant='outlined' label={option} {...getTagProps({ index })} />\r\n            ))\r\n          // eslint-disable-next-line react/jsx-curly-newline\r\n        }\r\n        renderInput={params => (\r\n          <TextField {...params} variant='outlined' label='Ролі' placeholder='Нова роль' />\r\n        )}\r\n        onChange={handleOnChange}\r\n        value={value}\r\n      />\r\n\r\n      <Box textAlign='center' my={3}>\r\n        <Button color='primary' variant='contained' onClick={handleOnGenerate}>\r\n          Згенерувати\r\n        </Button>\r\n      </Box>\r\n\r\n      {!!shuffledValue.length && (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>№</TableCell>\r\n                <TableCell>Роль</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {shuffledValue.map((row, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{row}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CssBaseline } from '@material-ui/core';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from 'styles/theme';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst renderRoot = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <App />\r\n  </ThemeProvider>,\r\n  renderRoot\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}