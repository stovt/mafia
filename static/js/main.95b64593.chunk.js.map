{"version":3,"sources":["styles/colors.ts","styles/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","primary","textPrimary","textSecondary","transparentize","background","paper","buttonText","border","themeOptions","palette","type","main","default","text","secondary","divider","shape","borderRadius","overrides","MuiButton","root","textTransform","containedPrimary","color","MuiInputLabel","asterisk","display","theme","createMuiTheme","SECURITY","ROLES","INITIAL_VALUE","Array","fill","App","useState","value","setValue","bitch","mafia","doctor","security","sheriff","chooses","setChooses","shuffledValue","setShuffledValue","handleOnChange","useCallback","event","val","reason","details","option","values","slice","indexOf","handleOnGenerate","shuffled","map","a","Math","random","sort","b","handleOnChangeChoose","name","target","Container","component","maxWidth","Box","py","xs","sm","mb","Autocomplete","multiple","freeSolo","options","getOptionLabel","getOptionSelected","renderTags","getTagProps","index","Chip","variant","label","renderInput","params","TextField","placeholder","onChange","textAlign","Button","onClick","length","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","key","includes","FormControl","fullWidth","InputLabel","htmlFor","Select","MenuItem","i","Boolean","window","location","hostname","match","renderRoot","document","getElementById","ReactDOM","render","ThemeProvider","CssBaseline","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95b64593.chunk.js","sourcesContent":["import { transparentize } from 'polished';\n\nconst colors = {\n  primary: '#0c9dbe',\n  textPrimary: '#fff',\n  textSecondary: transparentize(0.4, '#fff'),\n  background: '#202125',\n  paper: '#292a2d',\n  buttonText: '#131417',\n  border: transparentize(0.88, '#fff')\n};\n\nexport default colors;\n","import { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\nimport colors from './colors';\n\nexport const themeOptions: ThemeOptions = {\n  colors,\n  palette: {\n    type: 'dark',\n    primary: {\n      main: colors.primary\n    },\n    background: {\n      default: colors.background\n    },\n    text: {\n      primary: colors.textPrimary,\n      secondary: colors.textSecondary\n    },\n    divider: colors.border\n  },\n  shape: {\n    borderRadius: 8\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        textTransform: 'none'\n      },\n      containedPrimary: {\n        color: colors.buttonText\n      }\n    },\n    MuiInputLabel: {\n      asterisk: {\n        display: 'none'\n      }\n    }\n  }\n};\n\nconst theme = createMuiTheme(themeOptions);\n\nexport default theme;\n","import React, { useState, useCallback } from 'react';\nimport {\n  Container,\n  Box,\n  TextField,\n  Chip,\n  Button,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem\n} from '@material-ui/core';\nimport Autocomplete, {\n  AutocompleteChangeReason,\n  AutocompleteChangeDetails\n} from '@material-ui/lab/Autocomplete';\n\nconst MAFIA = 'Мафія';\nconst DOCTOR = 'Лікар';\nconst SHERIFF = 'Шериф';\nconst BITCH = 'Шлюха';\nconst TERRORIST = 'Терорист';\nconst SECURITY = 'Телохранітель';\nconst PIECE = 'Мирний';\n\nconst ROLES = [MAFIA, DOCTOR, SHERIFF, BITCH, TERRORIST, SECURITY, PIECE];\nconst INITIAL_VALUE = [\n  ...Array(2).fill(MAFIA),\n  DOCTOR,\n  SHERIFF,\n  BITCH,\n  TERRORIST,\n  SECURITY,\n  ...Array(3).fill(PIECE)\n];\n\nconst shuffleArray = (arr: any[]) =>\n  arr\n    .map(a => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1]);\n\nconst App = () => {\n  const [value, setValue] = useState(INITIAL_VALUE);\n\n  const [chooses, setChooses] = useState({\n    bitch: '',\n    mafia: '',\n    doctor: '',\n    security: '',\n    sheriff: ''\n  });\n\n  const [shuffledValue, setShuffledValue] = useState<string[]>([]);\n\n  const handleOnChange = useCallback(\n    (\n      event: React.ChangeEvent<{}>,\n      val: string[],\n      reason: AutocompleteChangeReason,\n      details?: AutocompleteChangeDetails<string>\n    ) => {\n      if (details?.option) {\n        switch (reason) {\n          case 'create-option':\n            setValue(values => [...values, details.option]);\n            break;\n          case 'remove-option':\n            setValue(values => [\n              ...values.slice(0, values.indexOf(details.option)),\n              ...values.slice(values.indexOf(details.option) + 1)\n            ]);\n            break;\n          case 'select-option':\n            setValue(values => [...values, details.option]);\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    []\n  );\n\n  const handleOnGenerate = useCallback(() => {\n    const shuffled = shuffleArray(value);\n\n    setShuffledValue(shuffled);\n\n    setChooses({\n      bitch: '',\n      mafia: '',\n      doctor: '',\n      security: '',\n      sheriff: ''\n    });\n  }, [value]);\n\n  const handleOnChangeChoose = useCallback(\n    (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n      const { name } = event.target;\n\n      if (name) {\n        setChooses(values => ({\n          ...values,\n          [name]: event.target.value\n        }));\n      }\n    },\n    []\n  );\n\n  return (\n    <Container component='main' maxWidth='sm'>\n      <Box py={{ xs: 2, sm: 3 }}>\n        <Box mb={4}>\n          <Autocomplete\n            multiple\n            freeSolo\n            options={ROLES}\n            getOptionLabel={option => option}\n            getOptionSelected={() => false}\n            renderTags={\n              (val, getTagProps) =>\n                val.map((option, index) => (\n                  <Chip variant='outlined' label={option} {...getTagProps({ index })} />\n                ))\n              // eslint-disable-next-line react/jsx-curly-newline\n            }\n            renderInput={params => (\n              <TextField {...params} variant='outlined' label='Ролі' placeholder='Нова роль' />\n            )}\n            onChange={handleOnChange}\n            value={value}\n          />\n        </Box>\n\n        <Box textAlign='center' mb={4}>\n          <Button color='primary' variant='contained' onClick={handleOnGenerate}>\n            Згенерувати\n          </Button>\n        </Box>\n\n        {!!shuffledValue.length && (\n          <Box>\n            <Box mb={4}>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>№</TableCell>\n                      <TableCell>Роль</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {shuffledValue.map((row, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>{row}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n\n            {shuffledValue.includes(BITCH) && (\n              <Box mb={3}>\n                <FormControl fullWidth variant='outlined'>\n                  <InputLabel htmlFor='bitch'>Вибір шлюхи</InputLabel>\n                  <Select\n                    label='Вибір шлюхи'\n                    name='bitch'\n                    value={chooses.bitch}\n                    onChange={handleOnChangeChoose}\n                  >\n                    <MenuItem value=''>\n                      <em>Ніякий</em>\n                    </MenuItem>\n                    {shuffledValue.map((val, i) =>\n                      val === BITCH ? null : (\n                        <MenuItem value={i} key={i}>\n                          {i + 1} - {val}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n              </Box>\n            )}\n\n            {shuffledValue.includes(MAFIA) && (\n              <Box mb={3}>\n                <FormControl fullWidth variant='outlined'>\n                  <InputLabel htmlFor='mafia'>Вибір мафії</InputLabel>\n                  <Select\n                    label='Вибір мафії'\n                    name='mafia'\n                    value={chooses.mafia}\n                    onChange={handleOnChangeChoose}\n                  >\n                    <MenuItem value=''>\n                      <em>Ніякий</em>\n                    </MenuItem>\n                    {shuffledValue.map((val, i) =>\n                      val === MAFIA || val === TERRORIST ? null : (\n                        <MenuItem value={i} key={i}>\n                          {i + 1} - {val}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n              </Box>\n            )}\n\n            {shuffledValue.includes(DOCTOR) && (\n              <Box mb={3}>\n                <FormControl fullWidth variant='outlined'>\n                  <InputLabel htmlFor='doctor'>Вибір лікаря</InputLabel>\n                  <Select\n                    label='Вибір лікаря'\n                    name='doctor'\n                    value={chooses.doctor}\n                    onChange={handleOnChangeChoose}\n                  >\n                    <MenuItem value=''>\n                      <em>Ніякий</em>\n                    </MenuItem>\n                    {shuffledValue.map((val, i) =>\n                      val === DOCTOR ? null : (\n                        <MenuItem value={i} key={i}>\n                          {i + 1} - {val}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n              </Box>\n            )}\n\n            {shuffledValue.includes(SECURITY) && (\n              <Box mb={3}>\n                <FormControl fullWidth variant='outlined'>\n                  <InputLabel htmlFor='security'>Вибір телохранітеля</InputLabel>\n                  <Select\n                    label='Вибір телохранітеля'\n                    name='security'\n                    value={chooses.security}\n                    onChange={handleOnChangeChoose}\n                  >\n                    <MenuItem value=''>\n                      <em>Ніякий</em>\n                    </MenuItem>\n                    {shuffledValue.map((val, i) =>\n                      val === SECURITY ? null : (\n                        <MenuItem value={i} key={i}>\n                          {i + 1} - {val}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n              </Box>\n            )}\n\n            {shuffledValue.includes(SHERIFF) && (\n              <Box mb={3}>\n                <FormControl fullWidth variant='outlined'>\n                  <InputLabel htmlFor='sheriff'>Вибір шерифа</InputLabel>\n                  <Select\n                    label='Вибір шерифа'\n                    name='sheriff'\n                    value={chooses.sheriff}\n                    onChange={handleOnChangeChoose}\n                  >\n                    <MenuItem value=''>\n                      <em>Ніякий</em>\n                    </MenuItem>\n                    {shuffledValue.map((val, i) =>\n                      val === SHERIFF ? null : (\n                        <MenuItem value={i} key={i}>\n                          {i + 1} - {val}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n              </Box>\n            )}\n          </Box>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'styles/theme';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderRoot = document.getElementById('root');\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  renderRoot\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}