{"version":3,"sources":["styles/colors.ts","styles/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","primary","textPrimary","textSecondary","transparentize","background","paper","buttonText","border","themeOptions","palette","type","main","default","text","secondary","divider","shape","borderRadius","overrides","MuiButton","root","textTransform","containedPrimary","color","MuiInputLabel","asterisk","display","theme","createMuiTheme","ROLES","INITIAL_VALUE","App","useState","value","setValue","shuffledValue","setShuffledValue","handleOnChange","useCallback","event","val","reason","details","option","values","handleOnGenerate","shuffled","map","a","Math","random","sort","b","Box","my","px","mx","maxWidth","Autocomplete","multiple","freeSolo","options","getOptionLabel","getOptionSelected","renderTags","getTagProps","index","Chip","variant","label","renderInput","params","TextField","placeholder","onChange","textAlign","Button","onClick","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","row","key","Boolean","window","location","hostname","match","renderRoot","document","getElementById","ReactDOM","render","ThemeProvider","CssBaseline","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85ebb148.chunk.js","sourcesContent":["import { transparentize } from 'polished';\n\nconst colors = {\n  primary: '#0c9dbe',\n  textPrimary: '#fff',\n  textSecondary: transparentize(0.4, '#fff'),\n  background: '#202125',\n  paper: '#292a2d',\n  buttonText: '#131417',\n  border: transparentize(0.88, '#fff')\n};\n\nexport default colors;\n","import { createMuiTheme, ThemeOptions } from '@material-ui/core/styles';\nimport colors from './colors';\n\nexport const themeOptions: ThemeOptions = {\n  colors,\n  palette: {\n    type: 'dark',\n    primary: {\n      main: colors.primary\n    },\n    background: {\n      default: colors.background\n    },\n    text: {\n      primary: colors.textPrimary,\n      secondary: colors.textSecondary\n    },\n    divider: colors.border\n  },\n  shape: {\n    borderRadius: 8\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        textTransform: 'none'\n      },\n      containedPrimary: {\n        color: colors.buttonText\n      }\n    },\n    MuiInputLabel: {\n      asterisk: {\n        display: 'none'\n      }\n    }\n  }\n};\n\nconst theme = createMuiTheme(themeOptions);\n\nexport default theme;\n","import React, { useState, useCallback } from 'react';\nimport {\n  Box,\n  TextField,\n  Chip,\n  Button,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody\n} from '@material-ui/core';\nimport Autocomplete, {\n  AutocompleteChangeReason,\n  AutocompleteChangeDetails\n} from '@material-ui/lab/Autocomplete';\n\nconst ROLES = ['Мафія', 'Терорист', 'Мирний', 'Шлюха', 'Шериф', 'Лікар', 'Телохранітель'];\nconst INITIAL_VALUE = [\n  'Мафія',\n  'Терорист',\n  'Мирний',\n  'Шлюха',\n  'Шериф',\n  'Лікар',\n  'Мирний',\n  'Мирний'\n];\n\nconst shuffleArray = (arr: any[]) =>\n  arr\n    .map(a => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1]);\n\nconst App = () => {\n  const [value, setValue] = useState(INITIAL_VALUE);\n  const [shuffledValue, setShuffledValue] = useState<string[]>([]);\n\n  const handleOnChange = useCallback(\n    (\n      event: React.ChangeEvent<{}>,\n      val: string[],\n      reason: AutocompleteChangeReason,\n      details?: AutocompleteChangeDetails<string>\n    ) => {\n      if (details?.option) {\n        switch (reason) {\n          case 'create-option':\n            setValue(values => [...values, details.option]);\n            break;\n          case 'remove-option':\n            setValue(values => [...values, details.option]);\n            break;\n          case 'select-option':\n            setValue(values => [...values, details.option]);\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    []\n  );\n\n  const handleOnGenerate = useCallback(() => {\n    const shuffled = shuffleArray(value);\n    setShuffledValue(shuffled);\n  }, [value]);\n\n  return (\n    <Box my={5} px={3} mx='auto' maxWidth={600}>\n      <Autocomplete\n        multiple\n        freeSolo\n        options={ROLES}\n        getOptionLabel={option => option}\n        getOptionSelected={() => false}\n        renderTags={\n          (val, getTagProps) =>\n            val.map((option, index) => (\n              <Chip variant='outlined' label={option} {...getTagProps({ index })} />\n            ))\n          // eslint-disable-next-line react/jsx-curly-newline\n        }\n        renderInput={params => (\n          <TextField {...params} variant='outlined' label='Ролі' placeholder='Нова роль' />\n        )}\n        onChange={handleOnChange}\n        value={value}\n      />\n\n      <Box textAlign='center' my={3}>\n        <Button color='primary' variant='contained' onClick={handleOnGenerate}>\n          Згенерувати\n        </Button>\n      </Box>\n\n      {!!shuffledValue.length && (\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>№</TableCell>\n                <TableCell>Роль</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {shuffledValue.map((row, index) => (\n                <TableRow key={index}>\n                  <TableCell>{index + 1}</TableCell>\n                  <TableCell>{row}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from 'styles/theme';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderRoot = document.getElementById('root');\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  renderRoot\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}